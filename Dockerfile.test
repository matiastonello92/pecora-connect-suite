# Multi-stage Dockerfile for Test Environment

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build for test environment
RUN npm run build:test

# Production stage
FROM nginx:alpine AS production

# Install Node.js for health checks and utilities
RUN apk add --no-cache nodejs npm

# Copy built application
COPY --from=builder /app/dist-test /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx/test.conf /etc/nginx/conf.d/default.conf

# Copy health check script
COPY scripts/health-check.sh /usr/local/bin/health-check.sh
RUN chmod +x /usr/local/bin/health-check.sh

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nginx-test && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-test -g nginx-test nginx-test && \
    chown -R nginx-test:nginx-test /usr/share/nginx/html && \
    chown -R nginx-test:nginx-test /var/cache/nginx && \
    chown -R nginx-test:nginx-test /var/log/nginx && \
    chown -R nginx-test:nginx-test /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx-test:nginx-test /var/run/nginx.pid

# Add test environment metadata
LABEL environment="test" \
      version="1.0" \
      description="Management PN Test Environment" \
      maintainer="devops@managementpn.services"

# Add environment variables
ENV NODE_ENV=test \
    NGINX_USER=nginx-test \
    NGINX_UID=1001 \
    NGINX_GID=1001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD /usr/local/bin/health-check.sh

# Switch to non-root user
USER nginx-test

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]